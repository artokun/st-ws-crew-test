// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec2, Vec2T } from '../../flatbuffers/game-state/vec2.js';


export class Player implements flatbuffers.IUnpackableObject<PlayerT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Player {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayer(bb:flatbuffers.ByteBuffer, obj?:Player):Player {
  return (obj || new Player()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayer(bb:flatbuffers.ByteBuffer, obj?:Player):Player {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Player()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

position(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startPlayer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, positionOffset, 0);
}

static endPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PlayerT {
  return new PlayerT(
    this.id(),
    (this.position() !== null ? this.position()!.unpack() : null)
  );
}


unpackTo(_o: PlayerT): void {
  _o.id = this.id();
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
}
}

export class PlayerT implements flatbuffers.IGeneratedObject {
constructor(
  public id: number = 0,
  public position: Vec2T|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  Player.startPlayer(builder);
  Player.addId(builder, this.id);
  Player.addPosition(builder, (this.position !== null ? this.position!.pack(builder) : 0));

  return Player.endPlayer(builder);
}
}
