// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MessageType } from '../../flatbuffers/game-state/message-type.js';
import { Player, PlayerT } from '../../flatbuffers/game-state/player.js';


export class GameState implements flatbuffers.IUnpackableObject<GameStateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameState(bb:flatbuffers.ByteBuffer, obj?:GameState):GameState {
  return (obj || new GameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameState(bb:flatbuffers.ByteBuffer, obj?:GameState):GameState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messageType():MessageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MessageType.InitialState;
}

players(index: number, obj?:Player):Player|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Player()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGameState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, messageType:MessageType) {
  builder.addFieldInt8(0, messageType, MessageType.InitialState);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGameState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGameStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedGameStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createGameState(builder:flatbuffers.Builder, messageType:MessageType, playersOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameState.startGameState(builder);
  GameState.addMessageType(builder, messageType);
  GameState.addPlayers(builder, playersOffset);
  return GameState.endGameState(builder);
}

unpack(): GameStateT {
  return new GameStateT(
    this.messageType(),
    this.bb!.createObjList<Player, PlayerT>(this.players.bind(this), this.playersLength())
  );
}


unpackTo(_o: GameStateT): void {
  _o.messageType = this.messageType();
  _o.players = this.bb!.createObjList<Player, PlayerT>(this.players.bind(this), this.playersLength());
}
}

export class GameStateT implements flatbuffers.IGeneratedObject {
constructor(
  public messageType: MessageType = MessageType.InitialState,
  public players: (PlayerT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const players = GameState.createPlayersVector(builder, builder.createObjectOffsetList(this.players));

  return GameState.createGameState(builder,
    this.messageType,
    players
  );
}
}
