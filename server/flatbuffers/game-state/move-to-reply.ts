// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Action } from '../../flatbuffers/game-state/action.js';
import { Vec2, Vec2T } from '../../flatbuffers/game-state/vec2.js';


export class MoveToReply implements flatbuffers.IUnpackableObject<MoveToReplyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MoveToReply {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMoveToReply(bb:flatbuffers.ByteBuffer, obj?:MoveToReply):MoveToReply {
  return (obj || new MoveToReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMoveToReply(bb:flatbuffers.ByteBuffer, obj?:MoveToReply):MoveToReply {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MoveToReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

action():Action {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Action.Move;
}

playerId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

from(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

to(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

departureTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

arrivalTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startMoveToReply(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addAction(builder:flatbuffers.Builder, action:Action) {
  builder.addFieldInt8(0, action, Action.Move);
}

static addPlayerId(builder:flatbuffers.Builder, playerId:number) {
  builder.addFieldInt32(1, playerId, 0);
}

static addFrom(builder:flatbuffers.Builder, fromOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, fromOffset, 0);
}

static addTo(builder:flatbuffers.Builder, toOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, toOffset, 0);
}

static addDepartureTime(builder:flatbuffers.Builder, departureTime:number) {
  builder.addFieldInt32(4, departureTime, 0);
}

static addArrivalTime(builder:flatbuffers.Builder, arrivalTime:number) {
  builder.addFieldInt32(5, arrivalTime, 0);
}

static endMoveToReply(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): MoveToReplyT {
  return new MoveToReplyT(
    this.action(),
    this.playerId(),
    (this.from() !== null ? this.from()!.unpack() : null),
    (this.to() !== null ? this.to()!.unpack() : null),
    this.departureTime(),
    this.arrivalTime()
  );
}


unpackTo(_o: MoveToReplyT): void {
  _o.action = this.action();
  _o.playerId = this.playerId();
  _o.from = (this.from() !== null ? this.from()!.unpack() : null);
  _o.to = (this.to() !== null ? this.to()!.unpack() : null);
  _o.departureTime = this.departureTime();
  _o.arrivalTime = this.arrivalTime();
}
}

export class MoveToReplyT implements flatbuffers.IGeneratedObject {
constructor(
  public action: Action = Action.Move,
  public playerId: number = 0,
  public from: Vec2T|null = null,
  public to: Vec2T|null = null,
  public departureTime: number = 0,
  public arrivalTime: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  MoveToReply.startMoveToReply(builder);
  MoveToReply.addAction(builder, this.action);
  MoveToReply.addPlayerId(builder, this.playerId);
  MoveToReply.addFrom(builder, (this.from !== null ? this.from!.pack(builder) : 0));
  MoveToReply.addTo(builder, (this.to !== null ? this.to!.pack(builder) : 0));
  MoveToReply.addDepartureTime(builder, this.departureTime);
  MoveToReply.addArrivalTime(builder, this.arrivalTime);

  return MoveToReply.endMoveToReply(builder);
}
}
