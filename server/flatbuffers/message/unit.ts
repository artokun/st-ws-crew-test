// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { UnitState } from '../../flatbuffers/message/unit-state.js';
import { Vec2 } from '../../flatbuffers/shared/vec2.js';


export class Unit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Unit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUnit(bb:flatbuffers.ByteBuffer, obj?:Unit):Unit {
  return (obj || new Unit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUnit(bb:flatbuffers.ByteBuffer, obj?:Unit):Unit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Unit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

controlledBy():string|null
controlledBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
controlledBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

state():UnitState {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UnitState.Idle;
}

position(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startUnit(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addControlledBy(builder:flatbuffers.Builder, controlledByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, controlledByOffset, 0);
}

static addState(builder:flatbuffers.Builder, state:UnitState) {
  builder.addFieldInt8(3, state, UnitState.Idle);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, positionOffset, 0);
}

static endUnit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
